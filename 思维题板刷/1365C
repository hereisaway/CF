也是思维题里一类很常见的操作：用桶的思想加速遍历
给两个长度相同的排列a,b，可以转动任意次，相同位置且值相同，算一组配对，寻找转动后的最大配对数。
转动是循环的，一个方向转n次等于没转，转一个排列等于反方向转另一个排列，朝一个方向转x等于朝另一个方向转n-x，因此一共只有n种状态，
就是把任意一个序列朝一个方向转动0到n-1次，我们要做的就是计算这n种状态各自的匹配数。

暴力的思路就是先遍历每一种状态,再遍历该状态a,b的每一个元素，计算匹配数，o(n^2)的复杂度，n<=2e5，2s不可能过。
而桶的思想就是，我不分别计算每一个状态的匹配数，而是遍历所有元素，看每个元素在哪个状态里可以配对，然后给对应的状态的配对数加一。
这类似于有n个桶，然后把n个元素对配对的贡献分别放进对应的桶里，最后各个桶的值就是各个状态的配对数。
桶排是一种空间换时间的策略，优点是往往只需要o(n)的复杂度，也就是只用遍历一遍原始数据就行，缺点是桶数组的范围需要和可能出现的数据范围一样大，当数据范围很大，
数据个数很小时会造成极大的空间浪费。但是当数据范围不大时（比如这题两个序列都是排列，数据范围和数据个数一样大，都是n），桶的思想可以在使用空间不多的情况下极大地加速。
#include<bits/stdc++.h>
using namespace std;
#define db double
#define ll long long
#define rep1(i,x,y) for(int i=(x);i<=(y);i++)
#define rep2(i,x,y) for(int i=(x);i>=(y);i--)
#define inf 0x3f3f3f3f
const int N=2e5+10;
int rd(void){
	int x=0,f=1;
	char c=getchar();
	while(c>'9'||c<'0'){
		if(c=='-')f=-1;
		c=getchar();
	}
	while(c<='9'&&c>='0'){
		x=x*10+c-'0';
		c=getchar();
	}
	return x*f;
}
int a[N],b[N],pos[N],ans[N];
int main(){
	int n=rd();
	rep1(i,1,n){
		a[i]=rd();
		pos[a[i]]=i;//记录位置
	}
	rep1(i,1,n)
		b[i]=rd();
	rep1(i,1,n){
		int cur=pos[b[i]]-i;//b需要转动pos[b[i]]-i个位置才能让bi配对
    //也就是说bi对转动pos[b[i]]-i的状态的配对数有贡献
		if(cur<0)cur+=n;//可能小于0，等于朝另一个方向转n-cur
		ans[cur]++;//把贡献放进对应桶里
	} 
	int ans1=-1;
	rep1(i,0,n-1)ans1=max(ans[i],ans1);//最后看各个状态的配对数的最大值
	cout<<ans1;
}

