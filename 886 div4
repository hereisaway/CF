D 题目顺序可以任意排列，删掉一些题目，使任意相邻题目难度差的绝对值不超过k。
其实也就是要找相邻元素差的绝对值不超过k的最长序列。由于顺序可以随意修改，先排序，然后从后往前递推。
和之前那个相邻高度能整除才能摘果子的题的预处理len，有点类似，由于要求从每个点开始，满足某些性质的最长序列，
暴力一定是n^2的，所以需要递推。又由于序列要求的性质，是每个元素和后边的元素需要满足某些性质，在序列头部添加元素可以利用后面序列的结果，
因此从后往前递推，最终实现O(n)的复杂度。

#include<bits/stdc++.h>
using namespace std;
#define db double
#define ll long long
#define rep(i,x,y) for(int i=(x);i<=(y);i++)
#define rep1(i,x,y) for(int i=(x);i>=(y);i--)
#define inf 0x3f3f3f3f
#define pll pair<int,int> 
const int N=2e5+10;
const int mod=1e9+7;
int rd(void){
	int x=0,f=1;
	char c=getchar();
	while(c>'9'||c<'0'){
		if(c=='-')f=-1;
		c=getchar();
	}
	while(c<='9'&&c>='0'){
		x=x*10+c-'0';
		c=getchar();
	}
	return x*f;
}
void solve(void){	
	int n,k;
	cin>>n>>k;
	int a[n+2];
	a[n+1]=2e9+10;
	rep(i,1,n)cin>>a[i];
	sort(a+1,a+n+1);
	//rep(i,1,n)cout<<a[i]<<' ';
	//cout<<'\n';
	int mx=-1;
	int len[n];
	len[n]=1;//初始条件
	rep1(i,n-1,1)
		if(a[i+1]-a[i]<=k)len[i]=len[i+1]+1;//从后往前递推
		else len[i]=1;
	//rep(i,1,n)cout<<len[i]<<' ';
	//cout<<'\n';
	rep(i,1,n)mx=max(mx,len[i]);//最后找满足条件的最长序列
	cout<<n-mx<<'\n';
} 
int main(){
	cin.tie(0),cout.tie(0);
	ios::sync_with_stdio(0);
	int test;
	cin>>test;
	while(test--){
		solve(); 
	}
}
E 在基础的正方形外边加边框，求边框长度，使边框和原始正方形的总面积恰等于c。
求满足某个条件的最大值/最小值/值，且该条件是否满足具有单调性，可以O(1)检验是否满足，一眼二分
然而这题的难点在于c最大1e18，二分在没到答案，mid偏大时,用当前mid算出来的总面积可能大于1e18，而1e18已经是long long的上限了
cf似乎又不支持__int128，于是我选择用python。
虽然python常数大，运行时间和空间一般都是c的10倍以上，但是python编译器会帮我们安排变量的存储和运算方式，从而使int没有上限，
编程中不再需要考虑溢出问题。在被c的数据上限折磨了这么久之后，我觉得这真的是太酷了。
另外python的语法也确实简单，对比代码长度就能看出来，开始明白人生苦短，我用Python是什么意思了。

C语言版本：最终溢出了
#include<bits/stdc++.h>
using namespace std;
#define db double
#define ll long long
#define ull unsigned long long
#define rep(i,x,y) for(int i=(x);i<=(y);i++)
#define rep1(i,x,y) for(int i=(x);i>=(y);i--)
#define inf 0x3f3f3f3f
#define pll pair<int,int> 
const int N=2e5+10;
const int mod=1e9+7;
int rd(void){
	int x=0,f=1;
	char c=getchar();
	while(c>'9'||c<'0'){
		if(c=='-')f=-1;
		c=getchar();
	}
	while(c<='9'&&c>='0'){
		x=x*10+c-'0';
		c=getchar();
	}
	return x*f;
}
void solve(void){	
	int n;
	ull c,sums=0,s0=0;
	cin>>n>>c;
	rep(i,1,n){
		ull t;
		cin>>t;
		sums+=t;
		s0+=t*t;
	}
	ull l=1,r=5e8;
	while(l<=r){
		ull mid=(l+r)/2;
		ull sq=4*mid*(sums+n*mid)+s0;
		if(sq>=c)r=mid-1;
		else l=mid+1;
	}
	cout<<l<<'\n';
} 
int main(){
	cin.tie(0),cout.tie(0);
	ios::sync_with_stdio(0);
	int test;
	cin>>test;
	while(test--){
		solve(); 
	}
}
python版本：一个小细节是python默认读取模式是读取字符串，因此需要把字符串转int，并且一行输入多个数字时，
需要先把他们分开再转Int,具体来说就是用spilt把字符串按空格分开，然后遍历所有分割后的数字字符串，转int并存到另一个列表中
最后是，输出也是默认一行一个的，因此如果想一行输出多个数字，需要把print的参数end改成空格
test=input()
test=int(test)
for i in range(test):
    n,c=map(int,input().split())//把字符串按空格分开，存到map里，再把map中的值赋给n,c
    arr=input()
    nums=[int(n) for n in arr.split()]//也是先分开，再转int，对于列表可以用表达式一次性操作
    s0=[n*n for n in nums]
    l=1//初始值是什么类型，变量就是什么类型
    r=int(1e10)//没有隐式转换，把浮点转成整形赋给变量需要显式转换
    while l<=r:
        mid=(l+r)//2//如果后面发生除法，会自动转成浮点，因此需要用整除来保证依然是整形
        sqr=4*mid*(n*mid+sum(nums))+sum(s0)//全程不需要考虑溢出，泪目了，常数大点又如何，只要复杂度对了能大到哪去
        if(sqr>=c):
            r=mid-1
        else:
            l=mid+1
    print(l)

 F 给最多2e5个点，任意两个在同一行，同一列，或者同一条斜线上的点可以组成一对，问有多少对。
从八皇后问题判断棋盘是否合法中得到了灵感，这种判断是否在一条线上的问题，由于斜率是固定的，每个点的位置实际上可以由截距唯一确定
因此不需要记录棋盘上每一个点是否有棋子，只需记录每个截距上是否有棋子，这样需要记录的数据规模就从amax^2变成amax了。
进一步，amax为1e9，依然很大，而数据个数只有2e5，中间很多截距实际上没有点，因此可以离散化，直接用map就行
最后的问的是对数，对于每一个截距，如果有n个点位于该截距对应的直线上，就有C(n,2)对，遍历map，计算所有截距的对数总和就行
#include<bits/stdc++.h>
using namespace std;
#define db double
#define ll long long
#define rep(i,x,y) for(int i=(x);i<=(y);i++)
#define rep1(i,x,y) for(int i=(x);i>=(y);i--)
#define inf 0x3f3f3f3f
#define pll pair<int,int> 
const int N=2e5+10;
const int mod=1e9+7;
int rd(void){
	int x=0,f=1;
	char c=getchar();
	while(c>'9'||c<'0'){
		if(c=='-')f=-1;
		c=getchar();
	}
	while(c<='9'&&c>='0'){
		x=x*10+c-'0';
		c=getchar();
	}
	return x*f;
}
void solve(void){	
	int n;
	cin>>n;
	map<int,ll>a[4];//四种斜率，开四个map
	rep(i,1,n){
		int x,y;
		cin>>x>>y;
		a[0][y]++;//所在的直线点数加一
		a[1][x]++;
		a[2][x+y]++;
		a[3][y-x]++;
	}
	/*rep(i,0,3){
		for(auto j:a[i])cout<<j.first<<' '<<j.second<<'\n';
		cout<<'\n';
	}*/
	ll ans=0;
	rep(i,0,3)//遍历斜率
		for(auto j:a[i]){//遍历截距
			ll num=j.second;
			if(num>=2)ans+=num*(num-1);//计算该直线上的对数
		}
	cout<<ans<<'\n';
} 
int main(){
	cin.tie(0),cout.tie(0);
	ios::sync_with_stdio(0);
	int test;
	cin>>test;
	while(test--){
		solve(); 
	}
}

F 每个青蛙都有自己的步长，只能在1-n内的一个位置上设陷阱，求可以抓到最多青蛙的陷阱位置
经典问题，桶思想优化枚举。如果枚举1-n的每个位置有多少青蛙经过，共有n个青蛙,最终是n^2的。
但如果用桶的思想，如果一个青蛙经过i，就给cnt[i]++，可以实现n*n/ai的复杂度
#include<bits/stdc++.h>
using namespace std;
#define db double
#define ll long long
#define ull unsigned long long
#define rep(i,x,y) for(int i=(x);i<=(y);i++)
#define rep1(i,x,y) for(int i=(x);i>=(y);i--)
#define inf 0x3f3f3f3f
#define pll pair<int,int> 
const int N=2e5+10;
const int mod=1e9+7;
int rd(void){
	int x=0,f=1;
	char c=getchar();
	while(c>'9'||c<'0'){
		if(c=='-')f=-1;
		c=getchar();
	}
	while(c<='9'&&c>='0'){
		x=x*10+c-'0';
		c=getchar();
	}
	return x*f;
}
void solve(void){	
	int n,ans=-1;
	cin>>n;
	int mx[n+1]={0},cnt[n+1]={0};
	rep(i,1,n){
		int t;
		cin>>t;
		if(t<=n)cnt[t]++; //记录每种步长的青蛙个数
	} 
	rep(i,1,n)//枚举步长，大于n的步长在n内放陷阱也抓不住，不用管
		for(int j=i;j<=n;j+=i)mx[j]+=cnt[i];//把这个步长的青蛙的数量，放进能到的位置的桶里
	rep(i,1,n)ans=max(ans,mx[i]);//遍历桶，找最大青蛙数
	cout<<ans<<'\n';
} 
int main(){
	cin.tie(0),cout.tie(0);
	ios::sync_with_stdio(0);
	int test;
	cin>>test;
	while(test--){
		solve(); 
	}
}
